---
import { getBlogs, getBlogDetail } from '../library/microcms'
const response2 = await getBlogs({ fields: ["id", "title", "image", "tags", "publishedAt", "name"] })
export async function getStaticPaths(){
    const response = await getBlogs({fields: ["id"]})
    return response.contents.map((content)=>({
        params:{
            blogId: content.id
        }
    }))
}
const { blogId } = Astro.params;
const blog = await getBlogDetail(blogId);


import Layout from '../layouts/Layout.astro';
import Footer from '../layouts/footer.astro';
import BlogList from '../components/blogList.astro';
import '../css/inner/inner.css'
import '../css/blogId/anim-blogid.css'
import '../css/blogId/blogid.css'
---

<Layout title={blog.title}  />

<main>
    <article class="article">
        <div class="inner inner--article">
            <div class="article__container">
                <section class="article-main">
                    <img class="article__thumbnail" src={blog.image.url} alt=""  />
                    <div class="article__data">
                        <p class="article__name">作者 : {blog.name}</p>
                        <div class="article__times">
                            <p class="article__publish">
                                <time datetime={blog.publishedAt.substring(0, 10)}>公開日 : {blog.publishedAt.substring(0, 10)}</time>
                            </p>
                            <p class="article__updated">
                                <time datetime={blog.updatedAt.substring(0, 10)}>最終更新日 : {blog.updatedAt.substring(0, 10)}</time>
                            </p>
                        </div>
                    </div>
                    <h1 class="article__title">{blog.title}</h1>
                    <p class="article__intro">{blog.intro}</p>
                    <div class="article__text" id="js-article__text" set:html={blog.content} />
                </section>
                <aside class="article-aside">
                    <div class="article-aside__inner">
                        <div class="article-aside__container">
                            <h3 class="article-aside__title">目次</h3>
                            <ol class="article-aside__list" id="js-article-list">
                            </ol>
                        </div>
                    </div>
                </aside>
            </div>
        </div>
    </article>

    <div class="blog">
        <div class="inner inner--blog">
            <div class="blog-contents">
                <BlogList />
            </div>
        </div>
    </div>
</main>

<Footer />

<style lang="scss">
    .header{
        display: none;
    }
</style>

<script>
    document.querySelectorAll('#js-article__text').forEach((article_text)=>{
        const hTag = article_text.querySelectorAll('h2')
        const article_list = document.getElementById('js-article-list')
        let h2Count = 1
        // console.log(artile_list)
        for (let i = 0; i < hTag.length; i++) {
            const hTagElem = hTag[i]
            if (hTagElem.tagName == "H2") {
                const aside_li = document.createElement("li")
                const aside_aTag = document.createElement("a")
                const aside_Nestlist = document.createElement("ol")
                // aside_Nestlist.classList = `article_list${h2Count}`
                aside_aTag.textContent = hTagElem.textContent
                aside_aTag.href = "#"+hTagElem.id;
                article_list.appendChild(aside_li)
                aside_li.appendChild(aside_aTag)
                aside_li.appendChild(aside_Nestlist)
                aside_aTag.classList.add("article-aside__link")
                h2Count++

                // console.log(hTag[1])

                window.addEventListener('scroll', ()=>{
                    if(hTagElem.getBoundingClientRect().top < 280) {
                        aside_aTag.classList.add("article-aside__link--in")
                        aside_aTag.classList.remove("article-aside__link--out")
                    } else {
                        aside_aTag.classList.add("article-aside__link--out")
                        aside_aTag.classList.remove("article-aside__link--in")
                    }
                })

            } else {
                // const aside_li = document.createElement("li")
                const aside_aTag = document.createElement("a")
                aside_aTag.textContent = hTagElem.textContent
                aside_aTag.href = "#"+hTagElem.id;
                // const aside_Nestlist = document.querySelector(`.artile_list${h2Count-1}`)
            }
        }
    })
</script>